doctype html
html
  head
    title= title
    meta(charset="UTF-8")
    meta(name="viewport" content="width=device-width, initial-scale=1.0")
    link(rel="stylesheet", href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css")
    link(rel="stylesheet", href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.0/font/bootstrap-icons.css")
    link(rel="stylesheet", href="/stylesheets/style.css")
    script(src="https://cdn.jsdelivr.net/npm/sweetalert2@11")

  body
    nav.navbar.navbar-expand-lg.navbar-dark
      .container
        a.navbar-brand(href=(user ? (userRole === 'staff' ? '/staff/dashboard' : '/customer/dashboard') : '/'))
          i.bi.bi-film.me-2
          | Sakila Dashboard
        button.navbar-toggler(type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav")
          span.navbar-toggler-icon
        #navbarNav.collapse.navbar-collapse
          ul.navbar-nav.ms-auto
            if user
              li.nav-item.dropdown
                a.nav-link.dropdown-toggle(href="#" id="userDropdown" role="button" data-bs-toggle="dropdown")
                  i.bi.bi-person-circle.me-1
                  | #{user.first_name} #{user.last_name}
                ul.dropdown-menu
                  li
                    span.dropdown-item-text
                      small.text-muted Ingelogd als #{userRole}
                  li
                    hr.dropdown-divider
                  li
                    a.dropdown-item(href="/auth/logout")
                      i.bi.bi-box-arrow-right.me-1
                      | Logout
            else
              li.nav-item
                a.nav-link(href="/auth/login")
                  i.bi.bi-box-arrow-in-right.me-1
                  | Login

    .main-content
      .container.py-4
        block content
    
    script(src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js")
    
    // Success Popup Helper Functions
    script.
      const SuccessPopup = {
        show: (title, message) => {
          Swal.fire({
            icon: 'success',
            title: title,
            text: message,
            confirmButtonText: 'OK',
            confirmButtonColor: '#28a745',
            timer: 3000,
            timerProgressBar: true
          });
        },

        showWithRedirect: (title, message, redirectUrl, delay = 2000) => {
          Swal.fire({
            icon: 'success',
            title: title,
            text: message,
            confirmButtonText: 'OK',
            confirmButtonColor: '#28a745',
            timer: delay,
            timerProgressBar: true
          }).then(() => {
            window.location.href = redirectUrl;
          });
        },

        showAutoClose: (title, message, delay = 2000) => {
          Swal.fire({
            icon: 'success',
            title: title,
            text: message,
            showConfirmButton: false,
            timer: delay,
            timerProgressBar: true,
            toast: true,
            position: 'top-end'
          });
        },

        actorCreated: (actorName) => {
          SuccessPopup.show('Actor Toegevoegd!', `${actorName} is succesvol toegevoegd.`);
        },

        actorUpdated: (actorName) => {
          SuccessPopup.show('Actor Bijgewerkt!', `${actorName} is succesvol bijgewerkt.`);
        },

        actorDeleted: (actorName) => {
          SuccessPopup.show('Actor Verwijderd!', `${actorName} is verwijderd.`);
        },

        customerCreated: (customerName) => {
          SuccessPopup.show('Klant Aangemaakt!', `${customerName} is succesvol aangemaakt.`);
        },

        customerUpdated: (customerName) => {
          SuccessPopup.show('Klant Bijgewerkt!', `${customerName} is bijgewerkt.`);
        },

        rentalCreated: (filmTitle, customerName) => {
          SuccessPopup.show('Verhuur Aangemaakt!', `${filmTitle} is verhuurd aan ${customerName}.`);
        },

        rentalReturned: (filmTitle) => {
          SuccessPopup.show('Film Geretourneerd!', `${filmTitle} is geretourneerd.`);
        }
      };

      const ErrorPopup = {
        show: (title, message) => {
          Swal.fire({
            icon: 'error',
            title: title,
            text: message,
            confirmButtonText: 'OK',
            confirmButtonColor: '#dc3545'
          });
        }
      };

      const ConfirmPopup = {
        show: (title, message, confirmCallback) => {
          Swal.fire({
            title: title,
            text: message,
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: 'Ja, doorgaan!',
            cancelButtonText: 'Annuleren'
          }).then((result) => {
            if (result.isConfirmed) {
              confirmCallback();
            }
          });
        }
      };
      
      // Check for success/error messages in URL parameters
      const urlParams = new URLSearchParams(window.location.search);
      const successMsg = urlParams.get('success');
      const errorMsg = urlParams.get('error');
      const successType = urlParams.get('type');
      
      if (successMsg) {
        // Add a small delay to ensure page is fully loaded
        setTimeout(() => {
          switch(successType) {
            // Actor popups verwijderd
            case 'customer_created':
              SuccessPopup.customerCreated(decodeURIComponent(successMsg));
              break;
            case 'customer_updated':
              SuccessPopup.customerUpdated(decodeURIComponent(successMsg));
              break;
            case 'rental_created':
              SuccessPopup.rentalCreated(decodeURIComponent(successMsg), urlParams.get('customer') || '');
              break;
            default:
              // Alleen tonen voor customer en rental operaties
              if (successType && (successType.includes('customer_') || successType.includes('rental_'))) {
                SuccessPopup.show('Succes!', decodeURIComponent(successMsg));
              }
          }
        }, 500);
        
        // Clean URL after showing popup
        setTimeout(() => {
          window.history.replaceState({}, document.title, window.location.pathname);
        }, 1000);
      }
      
      if (errorMsg) {
        setTimeout(() => {
          ErrorPopup.show('Fout!', decodeURIComponent(errorMsg));
        }, 500);
        
        // Clean URL
        setTimeout(() => {
          window.history.replaceState({}, document.title, window.location.pathname);
        }, 1000);
      }